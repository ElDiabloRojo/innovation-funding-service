def targetBuild = hasProperty('profile') ? profile : 'docker'
apply from: targetBuild + "-build.gradle"

apply from: rootProject.file("gradle-support/java-spring-boot.gradle")
apply from: rootProject.file("gradle-support/openshift-build.gradle")
apply from: rootProject.file("gradle-support/prepare-docker.gradle")
apply from: rootProject.file("gradle-support/mapstruct.gradle")


apply from: "../flyway.gradle"
apply plugin: 'org.asciidoctor.convert'

project.version = financeDataServiceVersion
tagDocker.tag = financeDataServiceVersion
osStageRemote.tag = financeDataServiceVersion
tagDockerLocal.tag = financeDataServiceVersion
osStageLocal.tag = financeDataServiceVersion

def enabled = project.hasProperty('ifs.finance-data-service.enabled') ? project.property('ifs.finance-data-service.enabled').toBoolean() : true
[stop, removeContainer, createContainer, deploy, wait].each { task ->
    task.enabled = enabled
}
createContainer.portBindings = ['9012:8000']

deploy.dependsOn ":docker:ifs-mysql:ifs-finance-database:wait"
deploy.mustRunAfter ":docker:ifs-mysql:ifs-finance-database:deploy"

createContainer.networkAliases=["ifs-finance-data-service"]

ext.dockerDir = "$project.parent.projectDir/docker/"
ext.dockerComposeFile = "docker-compose/docker-compose-finance-totals.yml"

ext {
    snippetsDir = file('build/generated-snippets')
}

buildDocker.dependsOn prepareDockerInput
buildDocker.dependsOn ":docker:app-base-image:buildDocker"
buildDocker.tag = "innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"
buildDocker.inputDir = project.file("$project.buildDir/docker")
tagDocker.imageId = "innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"

prepareDockerBaseInput {
    inputs.file("$rootProject.projectDir/ifs-commons/build/classes")
    inputs.file("$rootProject.projectDir/ifs-resources/build/classes")
    inputs.file("$rootProject.projectDir/ifs-data-layer/data-service-commons/build/classes")
    inputs.file("$rootProject.projectDir/ifs-security/build/classes")


    dependsOn ":ifs-commons:build"
    dependsOn ":ifs-resources:build"
    dependsOn ":ifs-data-layer:data-service-commons:build"
    dependsOn ":ifs-security:build"

}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'mysql:mysql-connector-java'


    compile project(':ifs-commons')
    compile project(':ifs-resources')
    compile project(':ifs-security')

    compile project(':ifs-data-layer:data-service-commons')

    testCompile 'org.assertj:assertj-core:3.9.0'
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'

    testCompile project (path: ":ifs-resources", configuration: 'testArtifacts')
    testCompile project (path: ":ifs-commons", configuration: 'testArtifacts')
    testCompile project (path: ":ifs-security", configuration: 'testArtifacts')
    testCompile project (path: ":ifs-data-layer:data-service-commons", configuration: 'testArtifacts')

    testCompile 'au.com.dius:pact-jvm-provider-spring_2.12:3.5.14'
}

test {
    outputs.dir snippetsDir
    if (project.hasProperty('excludeTests')) {
        exclude "${project.excludeTests}"
    }

    if (project.hasProperty('testGroups')) {
        systemProperty 'testGroups', project.getProperty('testGroups')
    }
    finalizedBy asciidoctor

    if (targetBuild == 'docker') {
        dependsOn ":docker:ifs-mysql:ifs-finance-database:initDB"
    }

}

asciidoctor {
    attributes 'snippets': snippetsDir
    backends 'html5'
    inputs.dir snippetsDir
}

task asciidoctorOnly(type: Test) {
    beforeTest { desc ->
        println "Executing test ${desc.className}.${desc.name}"
    }
    useJUnit {
        includeCategories 'org.innovateuk.ifs.ControllerTest'
    }
    finalizedBy asciidoctor
}

flywayMigrate.dependsOn processResources

ext.serverPort=8080
