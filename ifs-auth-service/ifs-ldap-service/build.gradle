import org.apache.tools.ant.filters.ReplaceTokens

apply from: rootProject.file("gradle-support/openshift-build.gradle")

buildDocker.tag="innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"
buildDocker.inputDir=file("${project.buildDir}/docker")
tagDocker.imageId="innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"

def enabled = project.hasProperty('initialise') ? project.property('initialise').toBoolean() : false
[stop, removeContainer, createContainer, deploy, wait].each { task ->
    task.enabled = enabled
}
if (enabled) {
    buildDocker.outputs.upToDateWhen { false }
}

group 'innovateuk'
version project.version

apply plugin: 'idea'

def String ldapCertsVolume = 'src/main/docker/certs'

def String ldapEncryptionKeyFile = "${ldapCertsVolume}/ldap-encryption.key"
def String ldapEncryptionCertificateFile = "${ldapCertsVolume}/ldap-encryption.crt"

def String ldapPassword = project.properties['auth.ldap.password'] ?: "default"

buildscript {
    repositories { jcenter() }
}

task prepareDockerFile {
    def inputDir = file("${project.buildDir}/docker")

    doFirst {

        def String ldapEncryptionKey = file(ldapEncryptionKeyFile).text.trim().replace('\n', '\\n')
        def String ldapEncryptionCertificate = file(ldapEncryptionCertificateFile).text.trim().replace('\n', '\\n')
        copy {
            from 'src/main/docker/'
            into 'src/main/docker/'
            include 'Dockerfile-template'
            rename 'Dockerfile-template', 'Dockerfile'
            filter(ReplaceTokens, tokens: [auth_ldap_password              : ldapPassword,
                                           auth_ldap_encryption_key        : ldapEncryptionKey,
                                           auth_ldap_encryption_certificate: ldapEncryptionCertificate])
        }
        copy {
            from file('src/main/docker/Dockerfile')
            into inputDir
        }
        copy {
            from fileTree('src/main/docker/scripts')
            into "${inputDir}/scripts"
        }
    }
}

buildDocker.dependsOn prepareDockerFile
project.version = ldapVersion
tagDocker.tag = ldapVersion
osStageRemote.tag = ldapVersion
tagDockerLocal.tag = ldapVersion
osStageLocal.tag = ldapVersion

createContainer.containerName = "ldap"
createContainer.containerId = "ldap"
createContainer.env = ["LDAP_PORT=8389"]
createContainer.portBindings = ['8389:8389']
createContainer.hostName = "ldap"
