import org.apache.tools.ant.filters.ReplaceTokens
apply from: rootProject.file("gradle-support/openshift-build.gradle")

buildDocker.tag="innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"
//buildDocker.inputDir=file("${project.buildDir}/docker")
tagDocker.imageId="innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"

def enabled = project.hasProperty('initialise') ? project.property('initialise').toBoolean() : false
[stop, removeContainer, createContainer, deploy, wait].each { task ->
    task.enabled = enabled
}
if (enabled) {
    buildDocker.outputs.upToDateWhen { false }
}

group 'innovateuk'
version project.version

apply plugin: 'idea'

def String spCertsVolume = 'src/main/docker/certs'

def String spProxyKeyFile = "${spCertsVolume}/sp_proxy_key.pem"
def String spProxyCertificateFile = "${spCertsVolume}/sp_proxy_certificate.pem"
def String spProxyCacertificateFile = "${spCertsVolume}/sp_proxy_cacertificate.pem"

def String idpSigningCertificateFile = "${spCertsVolume}/idp-signing.crt"
def String idpEncryptionCertificateFile = "${spCertsVolume}/idp-encryption.crt"

buildscript {
    repositories { jcenter() }
}

task prepareDockerFile {
    dependsOn ':ifs-auth-service:prepareSecrets'

    def inputDir = project.file("$project.buildDir/docker")


    doFirst {
        def String spProxyKey = file(spProxyKeyFile).text.trim().replace('\n', '\\n')
        def String spProxyCertificate = file(spProxyCertificateFile).text.trim().replace('\n', '\\n')
        def String spProxyCacertificate = file(spProxyCacertificateFile).text.trim().replace('\n', '\\n')

        def String idpSigningCertificate = file(idpSigningCertificateFile).text.trim().replace('\n', '\\n')
        def String idpEncryptionCertificate = file(idpEncryptionCertificateFile).text.trim().replace('\n', '\\n')
        copy {
            from 'src/main/docker/'
            into 'src/main/docker/'
            include 'Dockerfile-template'
            rename 'Dockerfile-template', 'Dockerfile'
            filter(ReplaceTokens, tokens: [auth_sp_proxy_key              : spProxyKey,
                                           auth_sp_proxy_certificate      : spProxyCertificate,
                                           auth_sp_proxy_cacertificate    : spProxyCacertificate,
                                           auth_idp_signing_certificate   : idpSigningCertificate,
                                           auth_idp_encryption_certificate: idpEncryptionCertificate])
        }
        copy {
            from file('src/main/docker/Dockerfile')
            into inputDir
        }
        copy {
            from fileTree('src/main/docker/files')
            into "${inputDir}/files"
        }
        copy {
            from fileTree('src/main/docker/certs')
            into "${inputDir}/certs"
        }
    }
}

buildDocker.dependsOn prepareDockerFile
project.version = spVersion
tagDocker.tag = spVersion
osStageRemote.tag = spVersion
tagDockerLocal.tag = spVersion
osStageLocal.tag = spVersion

createContainer.containerName = "shib"
createContainer.containerId = "shib"
createContainer.env= ["SP_DOMAIN=ifs.local-dev","IDP_DOMAIN=auth.local-dev:9443","HTTPS_PORT=443","HTTP_PORT=80"]
createContainer.networkAliases=["ifs.local-dev"]
createContainer.portBindings = ['443:443']
createContainer.hostName="shib"