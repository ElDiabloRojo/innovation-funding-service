group 'innovateuk'
version project.version

apply plugin: 'idea'

buildscript {
    repositories { jcenter() }
}

def String spCertsVolume = 'ifs-sp-service/src/main/docker/certs'
def String idpCertsVolume = 'ifs-idp-service/src/main/docker/certs'
def String ldapCertsVolume = 'ifs-ldap-service/src/main/docker/certs'

// if there is no key/cert provided, we generate self-signed certificates
def String spProxyKeyFileName = 'sp_proxy_key.pem'
def String spProxyKeyFile = "${buildDir}/${spProxyKeyFileName}"
def String spProxyCertificateFileName = 'sp_proxy_certificate.pem'
def String spProxyCertificateFile = "${buildDir}/${spProxyCertificateFileName}"
def String spProxyCacertificateFileName = 'sp_proxy_cacertificate.pem'
def String spProxyCacertificateFile = "${buildDir}/${spProxyCacertificateFileName}"

def String idpProxyKeyFileName = 'idp_proxy_key.pem'
def String idpProxyKeyFile = "${buildDir}/${idpProxyKeyFileName}"
def String idpProxyCertificateFileName = 'idp_proxy_certificate.pem'
def String idpProxyCertificateFile = "${buildDir}/${idpProxyCertificateFileName}"
def String idpProxyCacertificateFileName = 'idp_proxy_cacertificate.pem'
def String idpProxyCacertificateFile = "${buildDir}/${idpProxyCacertificateFileName}"

def String idpSigningKeyFileName = 'idp-signing.key'
def String idpSigningKeyFile = "${buildDir}/${idpSigningKeyFileName}"
def String idpSigningCertificateFileName = 'idp-signing.crt'
def String idpSigningCertificateFile = "${buildDir}/${idpSigningCertificateFileName}"

def String idpEncryptionKeyFileName = 'idp-encryption.key'
def String idpEncryptionKeyFile = "${buildDir}/${idpEncryptionKeyFileName}"
def String idpEncryptionCertificateFileName = 'idp-encryption.crt'
def String idpEncryptionCertificateFile = "${buildDir}/${idpEncryptionCertificateFileName}"

def String ldapEncryptionKeyFileName = 'ldap-encryption.key'
def String ldapEncryptionKeyFile = "${buildDir}/${ldapEncryptionKeyFileName}"

def String ldapEncryptionCertificateFileName = 'ldap-encryption.crt'
def String ldapEncryptionCertificateFile = "${buildDir}/${ldapEncryptionCertificateFileName}"

task prepareIDPProxySecrets {
    doFirst {
        if (!file("${idpCertsVolume}/${idpProxyKeyFileName}").exists() ||
                !file("${idpCertsVolume}/${idpProxyCertificateFileName}").exists() ||
                !file("${idpCertsVolume}/${idpProxyCacertificateFileName}").exists()) {
            buildDir.mkdir()
            copy {
                from file(idpProxyKeyFile)
                from file(idpProxyCertificateFile)
                from file(idpProxyCacertificateFile)
                into idpCertsVolume
            }
        }
    }
}

task prepareIDPSigningSecrets {
    if (!file("${idpCertsVolume}/${idpSigningKeyFileName}").exists() ||
            !file("${idpCertsVolume}/${idpSigningCertificateFileName}").exists()) {
        buildDir.mkdir()
        exec {
            executable = 'openssl'
            args = ['req', '-x509',
                    '-newkey', 'rsa:4096',
                    '-keyout', idpSigningKeyFile,
                    '-out', idpSigningCertificateFile,
                    '-days', '3650',
                    '-nodes',
                    '-subj', '/C=GB/ST=Wiltshire/L=Swindon/O=Innovate UK/OU=IFS/CN=auth.local-dev'
            ]
        }
        copy {
            from file(idpSigningKeyFile)
            from file(idpSigningCertificateFile)
            into idpCertsVolume
        }
    }
}

task prepareIDPEncryptionSecrets {
    if (!file("${idpCertsVolume}/${idpEncryptionKeyFileName}").exists() ||
            !file("${idpCertsVolume}/${idpEncryptionCertificateFileName}").exists()) {
        buildDir.mkdir()

        exec {
            executable = 'openssl'
            args = ['req', '-x509',
                    '-newkey', 'rsa:4096',
                    '-keyout', idpEncryptionKeyFile,
                    '-out', idpEncryptionCertificateFile,
                    '-days', '3650',
                    '-nodes',
                    '-subj', '/C=GB/ST=Wiltshire/L=Swindon/O=Innovate UK/OU=IFS/CN=auth.local-dev'
            ]
        }
        copy {
            from file(idpEncryptionKeyFile)
            from file(idpEncryptionCertificateFile)
            into idpCertsVolume
        }
    }
}

task prepareSPSecrets {
    if (!file("${spCertsVolume}/${spProxyKeyFileName}").exists() ||
            !file("${spCertsVolume}/${spProxyCertificateFileName}").exists() ||
            !file("${spCertsVolume}/${spProxyCacertificateFileName}").exists()) {
        buildDir.mkdir()

        exec {
            executable = 'openssl'
            args = ['req', '-x509',
                    '-newkey', 'rsa:4096',
                    '-keyout', spProxyKeyFile,
                    '-out', spProxyCertificateFile,
                    '-days', '3650',
                    '-nodes',
                    '-subj', '/C=GB/ST=Wiltshire/L=Swindon/O=Innovate UK/OU=IFS/CN=ifs.local-dev'
            ]
        }
        copy {
            from file(spProxyCertificateFile)
            into buildDir
            rename 'sp_proxy_certificate.pem', 'sp_proxy_cacertificate.pem'
        }
        copy {
            from file(spProxyKeyFile)
            from file(spProxyCertificateFile)
            from file(spProxyCacertificateFile)
            into spCertsVolume
        }
    }
}

task prepareLDAPEncryptionSecrets {
    if (!file("${ldapCertsVolume}/${ldapEncryptionKeyFileName}").exists() ||
            !file("${ldapCertsVolume}/${ldapEncryptionCertificateFileName}").exists()) {
        buildDir.mkdir()
        exec {
            executable = 'openssl'
            args = ['req', '-x509',
                    '-newkey', 'rsa:4096',
                    '-keyout', ldapEncryptionKeyFile,
                    '-out', ldapEncryptionCertificateFile,
                    '-days', '3650',
                    '-nodes',
                    '-subj', '/C=GB/ST=Wiltshire/L=Swindon/O=Innovate UK/OU=IFS/CN=ldap'
            ]
        }
        copy {
            from file(ldapEncryptionKeyFile)
            from file(ldapEncryptionCertificateFile)
            into ldapCertsVolume
        }
    }
}

task prepareSecrets {
    dependsOn prepareIDPProxySecrets
    dependsOn prepareIDPSigningSecrets
    dependsOn prepareIDPEncryptionSecrets
    dependsOn prepareLDAPEncryptionSecrets
    dependsOn prepareSPSecrets

    // on top of their respective certificates SP and IDP need each other's
    // and the IDP needs ldap's
    copy {
        // Copy from the spCertsVolume and ldapCertsVolume as these files should always present at this point where as
        // the relevant buildDir may well not contain them if a clean has been performed.
        // Additionally it allows us to drop know cert files into the spCertsVolume and ldapCertsVolume for named builds
        from file(spCertsVolume + "/" + spProxyCertificateFileName)
        from file(ldapCertsVolume + "/" + ldapEncryptionCertificateFileName)
        into idpCertsVolume
    }
    copy {
        // Copy from the idpCertsVolume as these files should always present at this point whereas the relevant
        // buildDir may well not contain them if a clean has been performed.
        // Additionally it allows us to drop know cert files into the idpCertsVolume for named builds
        from file(idpCertsVolume + "/" + idpSigningCertificateFileName)
        from file(idpCertsVolume + "/" + idpEncryptionCertificateFileName)
        into spCertsVolume
    }
}
