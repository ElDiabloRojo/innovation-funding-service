//support tasks for dealing with Openshift
if (project.hasProperty('profile') && profile == 'automated') {
    ext.openshiftEnv = project.properties['openshiftEnv'] ?: "automated"
}

//Workaround because of process resources.  dependency should be removed.
apply from: rootProject.file("gradle-support/java.gradle")
build.enabled = false
// End workaround

apply from: rootProject.file("gradle-support/openshift-util.gradle")

if (project.hasProperty('openshiftEnv')) {
    ext.openshiftEnv = openshiftEnv.replaceAll('/', '-')
}

if (!isNamedEnv()) {
    apply from: rootProject.file("gradle-support/non-named-env-properties.gradle")
} else {
    apply from: rootProject.file("gradle-support/named-env-properties.gradle")
    if(file(openshiftEnv + "-named-env-properties.gradle").exists()) {
        apply from: openshiftEnv + "-named-env-properties.gradle"
    }
}

def token = System.env.bamboo_openshift_svc_account_token ?: "oc whoami -t".execute().text.trim()

task prepareDeployment(type: Copy) {

    destinationDir = file('build/resources/main')
    from('os-files/') {
        include '**/*.yml'
    }
    filesMatching("**/**.*") {
        expand project.properties
    }
}

task setDatabaseDefaults {
    if (!project.hasProperty('DB_PORT')) {
        project.ext.DB_PORT = 3306
    }
}
prepareDeployment.mustRunAfter setDatabaseDefaults

task setFinanceDataServiceSyncDefaults {
    if (!project.hasProperty('DATA_SERVICE_PORT')) {
        project.ext.DATA_SERVICE_PORT = 8080
    }
}
prepareDeployment.mustRunAfter setFinanceDataServiceSyncDefaults

task setDbResetDefaults {
    if (!project.hasProperty('LDAP_PORT')) {
        project.ext.LDAP_PORT = 389
    }

    if (!project.hasProperty('ONLY_SYNC_LDAP')) {
        project.ext.ONLY_SYNC_LDAP = false
    }
}
prepareDeployment.mustRunAfter setDbResetDefaults


task osDeployProduction(type: Exec, dependsOn: prepareDeployment) {
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "production", project.version]
}

task osUpgradeProduction(type: Exec, dependsOn: prepareDeployment) {
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "production", project.version]
}

task dbAnonymisedDumpProduction(type: Exec, dependsOn: [setDatabaseDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/db-anonymised-dump.sh'
    args = [openshiftEnv, "production", project.version]
}

task dbBaselineProduction(type: Exec, dependsOn: [setDatabaseDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/db-baseline.sh'
    args = [openshiftEnv, "production", project.version]
}

task financeDataSyncProduction(type: Exec, dependsOn: [setDatabaseDefaults, setFinanceDataServiceSyncDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/finance-data-service-sync.sh'
    args = [openshiftEnv, "production", project.version]
}

// UAT tasks


task osDeployUat(type: Exec, dependsOn: prepareDeployment) {
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "uat", project.version]
}

task osUpgradeUat(type: Exec, dependsOn: prepareDeployment) {
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "uat", project.version]
}

task dbResetUat(type: Exec, dependsOn: [setDatabaseDefaults, setDbResetDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/db-reset.sh'
    args = [openshiftEnv, "uat", project.version]
}

task dbBaselineUat(type: Exec, dependsOn: [setDatabaseDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/db-baseline.sh'
    args = [openshiftEnv, "uat", project.version]
}

task financeDataSyncUat(type: Exec, dependsOn: [setDatabaseDefaults, setFinanceDataServiceSyncDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/finance-data-service-sync.sh'
    args = [openshiftEnv, "uat", project.version]
}

task dbAnonymisedDumpUat(type: Exec, dependsOn: [setDatabaseDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/db-anonymised-dump.sh'
    args = [openshiftEnv, "uat", project.version]
}

task importAnonDataIntoUat(type: Exec, dependsOn: prepareDeployment) {
    executable = 'setup-files/scripts/openshift/import-anon-data-into-environment.sh'
    args = [openshiftEnv, "uat", project.version]
}

// Demo tasks


task osDeployDemo(type: Exec, dependsOn: prepareDeployment) {
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "demo", project.version]
}

task osUpgradeDemo(type: Exec, dependsOn: prepareDeployment) {
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "demo", project.version]
}

task dbBaselineDemo(type: Exec, dependsOn: [setDatabaseDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/db-baseline.sh'
    args = [openshiftEnv, "demo", project.version]
}

task financeDataSyncDemo(type: Exec, dependsOn: [setDatabaseDefaults, setFinanceDataServiceSyncDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/finance-data-service-sync.sh'
    args = [openshiftEnv, "demo", project.version]
}

// Sysint tasks


task osDeploySysint(type: Exec, dependsOn: prepareDeployment) {
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "sysint", project.version]
}

task osUpgradeSysint(type: Exec, dependsOn: prepareDeployment) {
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "sysint", project.version]
}

task dbResetSysint(type: Exec, dependsOn: [setDatabaseDefaults, setDbResetDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/db-reset.sh'
    args = [openshiftEnv, "sysint", project.version]
}

task dbBaselineSysint(type: Exec, dependsOn: [setDatabaseDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/db-baseline.sh'
    args = [openshiftEnv, "sysint", project.version]
}

task financeDataSyncSysint(type: Exec, dependsOn: [setDatabaseDefaults, setFinanceDataServiceSyncDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/finance-data-service-sync.sh'
    args = [openshiftEnv, "sysint", project.version]
}

task osDeployFractalSysint(type: Exec, dependsOn: prepareDeployment) {
    executable = 'setup-files/scripts/openshift/os-deploy-fractal.sh'
    args = [openshiftEnv, "sysint", project.version]
}

// Perf tasks


task osDeployPerf(type: Exec, dependsOn: prepareDeployment) {
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "perf", project.version]
}

task osUpgradePerf(type: Exec, dependsOn: prepareDeployment) {
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "perf", project.version]
}

task dbResetPerf(type: Exec, dependsOn: [setDatabaseDefaults, setDbResetDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/db-reset.sh'
    args = [openshiftEnv, "perf", project.version]
}

task dbBaselinePerf(type: Exec, dependsOn: [setDatabaseDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/db-baseline.sh'
    args = [openshiftEnv, "perf", project.version]
}

task financeDataSyncPerf(type: Exec, dependsOn: [setDatabaseDefaults, setFinanceDataServiceSyncDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/finance-data-service-sync.sh'
    args = [openshiftEnv, "perf", project.version]
}

// Local tasks

task osInitClusterLocal(type: Exec) {
    executable = 'setup-files/scripts/openshift/init-local-cluster.sh'
    args = [openshiftEnv, "local", project.version]
}

task osDeployLocal(type: Exec, dependsOn: prepareDeployment) {
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "local", project.version]
}

task osUpgradeLocal(type: Exec, dependsOn: prepareDeployment) {
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "local", project.version]
}

task dbResetLocal(type: Exec, dependsOn: [setDatabaseDefaults, setDbResetDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/db-reset.sh'
    args = [openshiftEnv, "local", project.version]
}

task dbBaselineLocal(type: Exec, dependsOn: [setDatabaseDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/db-baseline.sh'
    args = [openshiftEnv, "local", project.version]
}

task financeDataSyncLocal(type: Exec, dependsOn: [setDatabaseDefaults, setFinanceDataServiceSyncDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/finance-data-service-sync.sh'
    args = [openshiftEnv, "local", project.version]
}

task dbAnonymisedDumpLocal(type: Exec, dependsOn: [setDatabaseDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/db-anonymised-dump.sh'
    args = [openshiftEnv, "local", project.version]
}

task deleteProjectLocal(type: Exec) {
    doFirst {
        executable 'oc'
        args 'delete', 'project', openshiftEnv, "--token=${"oc whoami -t".execute().text.trim()}", "--server=${svcAccountClauseServer}", "--insecure-skip-tls-verify=true"
    }

    ignoreExitValue true

    doLast {
        sleep 10_000L
    }
}

task createProjectLocal(type: Exec, dependsOn: deleteProjectLocal) {
    doFirst {
        executable 'oc'
        args 'new-project', "${openshiftEnv}", "--namespace=${openshiftEnv}", "--token=${"oc whoami -t".execute().text.trim()}", "--server=${svcAccountClauseServer}", "--insecure-skip-tls-verify=true"
    }
}

task importAnonDataIntoLocal(type:Exec, dependsOn: prepareDeployment) {
    executable = 'setup-files/scripts/openshift/import-anon-data-into-environment.sh'
    args = [openshiftEnv, "local",  project.version]
}

// Remote tasks

task deleteProject(type: Exec) {
    doFirst {
        executable 'oc'
        args 'delete', 'project', openshiftEnv, "--token=${token}", "--server=${svcAccountClauseServer}", "--insecure-skip-tls-verify=true"
    }

    ignoreExitValue true

    doLast {
        while ({
            sleep(15 * 1000)

            def ocCommand = "oc get project ${openshiftEnv} --token=${token} --server=${svcAccountClauseServer} --insecure-skip-tls-verify=true"
            def proc = ocCommand.execute()

            proc.waitFor()

            def projectDeleted = proc.exitValue() == 1
            if ( !projectDeleted ) {
              println "Project is not deleted yet.. "
            }

            !projectDeleted
        }()) continue
    }
}

task createProject(dependsOn: deleteProject) {
    doFirst {
        exec {
            executable 'oc'
            args 'new-project', "${openshiftEnv}", "--namespace=${openshiftEnv}", "--token=${token}", "--server=${svcAccountClauseServer}", "--insecure-skip-tls-verify=true"
        }

        if (openshiftEnv.startsWith("at-")) {
            exec {
                executable 'oc'
                args 'patch', 'namespace', "${openshiftEnv}", "-p", '{\"metadata\":{\"annotations\":{\"openshift.io/node-selector\":\"purpose=perftesting\"}}}', "--token=${token}", "--server=${svcAccountClauseServer}", "--insecure-skip-tls-verify=true"
            }

            for( String user : System.env.bamboo_openshift_at_users.split(',') ) {
                exec {
                    executable 'oc'
                    args 'adm', 'policy', 'add-role-to-user', 'admin', "${user}", '-n', "${openshiftEnv}", "--token=${token}", "--server=${svcAccountClauseServer}", "--insecure-skip-tls-verify=true"
                }
            }
        }
    }
}

task osDeployFractalRemote(type: Exec, dependsOn: prepareDeployment) {
    executable = 'setup-files/scripts/openshift/os-deploy-fractal.sh'
    args = [openshiftEnv, "remote", project.version]
}

task osDeployRemote(type: Exec, dependsOn: prepareDeployment) {
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "remote", project.version]
}

task osUpgradeRemote(type: Exec, dependsOn: prepareDeployment) {
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "remote", project.version]
}

task dbAnonymisedDumpRemote(type: Exec, dependsOn: [setDatabaseDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/db-anonymised-dump.sh'
    args = [openshiftEnv, "remote", project.version]
}

task importAnonDataIntoRemote(type: Exec, dependsOn: prepareDeployment) {
    executable = 'setup-files/scripts/openshift/import-anon-data-into-environment.sh'
    args = [openshiftEnv, "remote", project.version]
}

task dbResetRemote(type: Exec, dependsOn: [setDatabaseDefaults, setDbResetDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/db-reset.sh'
    args = [openshiftEnv, "remote", project.version]
}

task dbBaselineRemote(type: Exec, dependsOn: [setDatabaseDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/db-baseline.sh'
    args = [openshiftEnv, "remote", project.version]
}

task financeDataSyncRemote(type: Exec, dependsOn: [setDatabaseDefaults, setFinanceDataServiceSyncDefaults, prepareDeployment]) {
    executable = 'setup-files/scripts/openshift/finance-data-service-sync.sh'
    args = [openshiftEnv, "remote", project.version]
}

task robotTestsFilter(type: Copy) {
    from 'robot-tests/IFS_acceptance_tests/resources/variables/'
    into 'robot-tests/IFS_acceptance_tests/resources/variables/'
    include 'EMAIL_VARIABLES_TEMPLATE.robot'
    rename 'EMAIL_VARIABLES_TEMPLATE.robot', 'EMAIL_VARIABLES_SENSITIVE.robot'
    filter(ReplaceTokens, tokens: [test_mailbox_one_password: project.properties['ifs.robot.mailbox.one.password'], test_mailbox_two_password: project.properties['ifs.robot.mailbox.two.password']])
}

import org.apache.tools.ant.filters.*

task osTestRemote(type: Exec, dependsOn: robotTestsFilter) {
    executable = 'setup-files/scripts/openshift/os-test-remote.sh'
    args = [openshiftEnv, osTestArgs]
}

task osBlockTilTestsRunning(type: Exec) {
    executable = 'setup-files/scripts/openshift/os-block-til-tests-running.sh'
    args = [openshiftEnv, "remote", project.version]
}

task osStopTests(type: Exec) {
    executable = 'setup-files/scripts/openshift/os-stop-tests.sh'
    args = [openshiftEnv, "remote", project.version]
}

task osTestResults(type: Exec) {
    executable = 'setup-files/scripts/openshift/os-test-results.sh'
    args = [openshiftEnv, "remote", project.version]
}
